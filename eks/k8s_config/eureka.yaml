apiVersion: v1
kind: Pod
metadata:
  name: humanoid
  labels:
    env: eureka
spec:
  serviceAccountName: aws-access
  automountServiceAccountToken: true
  restartPolicy: Never
  containers:
    - name: humanoid
      image: 126634536477.dkr.ecr.us-east-2.amazonaws.com/addf-eureka-storage-robotic-applications-ecr:ubuntu-ros2
      securityContext:
        privileged: true
        allowPrivilegeEscalation: true
        capabilities:
          add:
            - ALL
      imagePullPolicy: "Always"
      command: ["/bin/bash", "-c", "/usr/local/bin/eureka_controller.sh"]
      env:
        - name: BUCKET
          value: "addf-dcv-demo-us-east-2"
        - name: AWS_REGION
          value: "us-east-2"
        - name: DISPLAY
          value: ":0"
        - name: OPENAI_API_KEY
          value: "<OPENAI_KEY>"
        - name: EUREKA_ENV
          value: "humanoid"
        - name: EUREKA_SAMPLE
          value: "8"
        - name: EUREKA_ITERATIONS
          value: "64"
        - name: EUREKA_MAX_ITERATION
          value: "2000"
        - name: EUREKA_MODEL
          value: "claude-3-5-sonnet"
        - name: EUREKA_TRAINING_QUEUE_URL
          value: "https://sqs.us-east-2.amazonaws.com/126634536477/eureka-msg-queue"
        - name: EUREKA_NUM_EVAL
          value: "8"
      volumeMounts:
        - name: socket-volume
          mountPath: /tmp/.X11-unix
          readOnly: False
        - name: fsx
          mountPath: /mnt/fsx
          readOnly: False
        - name: anaconda3
          mountPath: /opt/python_env
  volumes:
    - name: socket-volume
      hostPath:
        path: "/var/addf/dcv-eks/sockets"
    - name: fsx
      persistentVolumeClaim:
        claimName: fsx-claim
    - name: anaconda3
      hostPath:
        path: "/var/addf/anaconda3"
